// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema




generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model Account {
  id                 String  @id @default(cuid())
  userId             String
  createdAt          DateTime? @db.Date
  updatedAt          DateTime? @db.Date
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  refresh_token_expires_in Int?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  categories    Category[]    
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Category {
  id             Int        @id @default(autoincrement())
  categoryName   String     @db.VarChar(150)
  userId         String     
  expertise      Int?
  createdAt      DateTime?  @db.Date
  updatedAt      DateTime?       @db.Date
  description    String?    @db.VarChar(550)
  user           User       @relation(fields: [userId], references: [id], onUpdate: Cascade)
  decks          Deck[]
  @@index([userId], map: "userId")
}



model Deck {
  id            Int             @id @default(autoincrement())
  deckName      String          @db.VarChar(150)
  categoryId    Int
  createdAt     DateTime?       @db.Date
  updatedAt     DateTime?       @db.Date
  repetition    Int?
  expertise     Int?
  category      Category        @relation(fields: [categoryId], references: [id], onUpdate: Cascade)
  cards         Card[]
  @@index([categoryId], map: "categoryId")
}



model Card {
  id             Int             @id @default(autoincrement())
  question       String          @db.VarChar(350)
  answer         String          @db.VarChar(350)
  createdAt      DateTime?       @db.Date
  updatedAt      DateTime?       @db.Date
  repetition     Int?
  nextOccurrence String?         @db.VarChar(50)
  decks           Deck[]
  KeyWords        KeyWord[]
}



model KeyWord {
  id            Int             @id  @default(autoincrement())
  word          String          @db.VarChar(150)
  createdAt     DateTime?       @db.Date
  updatedAt     DateTime?       @db.Date
  cardId        Int
  card          Card            @relation( fields: [cardId],references : [id])
}